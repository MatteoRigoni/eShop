@inject IUpdateQuantityUseCase updateUseCase;
@inject IDeleteProductUseCase deleteUseCase;

@if (LineItem != null && LineItem.Product != null)
{
    <li class="row">
        <div class="col">
            <img src="@LineItem.Product.ImageLink" />
        </div>
        <div class="col">
            <h6>@LineItem.Product.Name</h6>
            <div>
                Quantity: &nbsp;&nbsp;
                <input type="number" min="0" value="@LineItem.Quantity" @onchange="HandleQuantityChange" />
            </div>
            <div>
                Price: &nbsp;&nbsp;@LineItem.Price.ToString("c")
            </div>
        </div>
        <div class="col">
            <button class="btn btn-light" @onclick="@(() => DeleteProduct(LineItem.ProductId))">Delete</button>
        </div>
    </li>
}

@code {
    [Parameter]
    public OrderItem LineItem { get; set; }

    [Parameter]
    public EventCallback<Order> OnDeleteProduct { get; set; }

    [Parameter]
    public EventCallback<Order> OnUpdateQuantity { get; set; }

    async Task HandleQuantityChange(ChangeEventArgs e)
    {
        if (e.Value == null || string.IsNullOrWhiteSpace(e.Value.ToString())) return;

        int quantity = 0;
        if (int.TryParse(e.Value.ToString(), out quantity))
        {
            if (quantity < 0)
            {
                return;
            }
            else
            {
                var order = await updateUseCase.Execute(LineItem.ProductId, quantity);
                await OnUpdateQuantity.InvokeAsync(order);
            }
        }
    }

    async Task DeleteProduct(int productId)
    {
        var order = await deleteUseCase.Execute(productId);
        await OnDeleteProduct.InvokeAsync(order);
    }
}
